# -*- coding: utf-8 -*-
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import asyncio
import base64
import json
import io
import os
import sys
import pyaudio
from rich import color, console
from websockets.asyncio.client import connect
from websockets.asyncio.connection import Connection
from rich.console import Console
from rich.markdown import Markdown

if sys.version_info < (3, 11, 0):
    import taskgroup, exceptiongroup

    asyncio.TaskGroup = taskgroup.TaskGroup
    asyncio.ExceptionGroup = exceptiongroup.ExceptionGroup

FORMAT = pyaudio.paInt16
CHANNELS = 1
SEND_SAMPLE_RATE = 16000
RECEIVE_SAMPLE_RATE = 24000
CHUNK_SIZE = 512

host = "generativelanguage.googleapis.com"
model = "gemini-2.0-flash-exp"

api_key = os.environ["GOOGLE_API_KEY"]
uri = f"wss://{host}/ws/google.ai.generativelanguage.v1alpha.GenerativeService.BidiGenerateContent?key={api_key}"


class AudioLoop:
    def __init__(self):
        self.ws: Connection
        # Áî®‰∫éÂ≠òÂÇ®È∫¶ÂÖãÈ£éÈááÈõÜÂà∞ÁöÑÈü≥È¢ëÊï∞ÊçÆ
        # Áî±‰∫é PyAudio  library ÊòØ blocking ÁöÑÔºåÊâÄ‰ª•ÈúÄË¶Å‰ΩøÁî® asyncio.Queue Êù•ÈÅøÂÖçÈòªÂ°û
        self.audio_out_queue = asyncio.Queue()
        self.running_step = 0

    async def startup(self):
        setup_msg = {
            "setup": {
                "model": f"models/{model}",
                "generation_config": {
                    "response_modalities": ["TEXT"]
                }
            }
        }
        await self.ws.send(json.dumps(setup_msg))
        raw_response = await self.ws.recv(decode=False)
        setup_response = json.loads(raw_response.decode("utf-8"))

        # Send initial prompt after setup
        initial_msg = {
            "client_content": {
                "turns": [
                    {
                        "role": "user",
                        "parts": [{
                            "text": "‰Ω†ÊòØ‰∏ÄÂêç‰∏ì‰∏öÁöÑËã±ËØ≠Âè£ËØ≠ÊåáÂØºËÄÅÂ∏àÔºå‰Ω†ÈúÄË¶ÅÂ∏ÆÂä©Áî®Êà∑Á∫†Ê≠£ËØ≠Ê≥ïÂèëÈü≥ÔºåÁî®Êà∑Â∞Ü‰ºöËØ¥‰∏ÄÂè•Ëã±ÊñáÔºåÁÑ∂Âêé‰Ω†‰ºöÁªôÂá∫ËØÜÂà´Âá∫Êù•ÁöÑËã±ËØ≠ÊòØ‰ªÄ‰πàÔºåÂπ∂‰∏îÂëäËØâ‰ªñÂèëÈü≥‰∏≠Êúâ‰ªÄ‰πàÈóÆÈ¢òÔºåËØ≠Ê≥ïÊúâ‰ªÄ‰πàÈîôËØØÔºåÂπ∂‰∏î‰∏ÄÊ≠•‰∏ÄÊ≠•ÁöÑÁ∫†Ê≠£‰ªñÁöÑÂèëÈü≥ÔºåÂΩì‰∏ÄÊ¨°ÂèëÈü≥Ê≠£Á°ÆÂêéÔºåÊ†πÊçÆÂΩìÂâçËØ≠Âè•ÊèêÂá∫‰∏ã‰∏Ä‰∏™Âú∫ÊôØÁöÑËØ≠Âè•,ÁÑ∂Âêé‰∏ÄÁõ¥Âæ™ÁéØËøô‰∏™ËøáÁ®ãÔºåÁõ¥Âà∞Áî®Êà∑ËØ¥OKÔºåÊàëË¶ÅÈÄÄÂá∫„ÄÇ‰Ω†ÁöÑÂõûÁ≠îÊ∞∏ËøúË¶Å‰øùÊåÅ‰∏≠Êñá„ÄÇÂ¶ÇÊûúÊòéÁôΩ‰∫ÜËØ∑ÂõûÁ≠îOK‰∏§‰∏™Â≠ó"
                        }]
                    }
                ],
                "turn_complete": True
            }
        }
        await self.ws.send(json.dumps(initial_msg))
        current_response = []
        async for raw_response in self.ws:
            response = json.loads(raw_response.decode("utf-8"))  # ‰ΩøÁî® UTF-8 Ëß£Á†Å

            try:
                if "serverContent" in response:
                    parts = (
                        response["serverContent"].get("modelTurn", {}).get("parts", [])
                    )
                    for part in parts:
                        if "text" in part:
                            current_response.append(part["text"])
            except Exception:
                pass

            try:
                turn_complete = response["serverContent"]["turnComplete"]
            except KeyError:
                pass
            else:
                if turn_complete:
                    if "".join(current_response).startswith("OK"):
                        print("ÂàùÂßãÂåñÂÆåÊàê ‚úÖ")
                        return 

    async def listen_audio(self):
        pya = pyaudio.PyAudio()

        mic_info = pya.get_default_input_device_info()
        stream = pya.open(
            format=FORMAT,
            channels=CHANNELS,
            rate=SEND_SAMPLE_RATE,
            input=True,
            input_device_index=mic_info["index"],
            frames_per_buffer=CHUNK_SIZE,
        )
        
        console = Console()
        console.print("üé§ ËØ¥‰∏ÄÂè•Ëã±ËØ≠ÂêßÔºÅÊØîÂ¶Ç: What is blockchain?",style="yellow")

        while True:
            data = await asyncio.to_thread(stream.read, CHUNK_SIZE)
            # ËÆ°ÁÆóÈü≥Èáè - ‰ΩøÁî®ÁÆÄÂçïÁöÑÂ≠óËäÇÂπ≥ÂùáÂÄº
            # ÊØè‰∏™ÈááÊ†∑ÊòØ2Â≠óËäÇÔºà16‰ΩçÔºâÔºåÊâÄ‰ª•ÊØèÊ¨°Âèñ2‰∏™Â≠óËäÇËΩ¨Êç¢‰∏∫Êï¥Êï∞
            audio_data = []
            for i in range(0, len(data), 2):
                sample = int.from_bytes(data[i:i+2], byteorder='little', signed=True)
                audio_data.append(abs(sample))
            volume = sum(audio_data) / len(audio_data)
            if volume > 200:  # ÈòàÂÄºÂèØ‰ª•Ê†πÊçÆÈúÄË¶ÅË∞ÉÊï¥
                if self.running_step == 0:
                    console.print("üé§ :",style="yellow",end="")
                    self.running_step += 1
                console.print("*", style="green", end="")
            self.audio_out_queue.put_nowait(data)

    async def send_audio(self):
        while True:
            chunk = await self.audio_out_queue.get()
            msg = {
                "realtime_input": {
                    "media_chunks": [
                        {"data": base64.b64encode(chunk).decode(), "mime_type": "audio/pcm"}
                    ]
                }
            }
            msg = json.dumps(msg)
            await self.ws.send(msg)

    async def receive_audio(self):
        console = Console()
        current_response = []  
        async for raw_response in self.ws:
            if self.running_step == 1:
                console.print("\n‚ôªÔ∏è Â§ÑÁêÜ‰∏≠Ôºö",end="")
                self.running_step += 1
            response = json.loads(raw_response.decode("utf-8"))  

            try:
                if "serverContent" in response:
                    parts = (
                        response["serverContent"].get("modelTurn", {}).get("parts", [])
                    )
                    for part in parts:
                        if "text" in part:
                            current_response.append(part["text"])
                            console.print("-",style="blue",end="")
            except Exception:
                pass

            try:
                turn_complete = response["serverContent"]["turnComplete"]
            except KeyError:
                pass
            else:
                if turn_complete:
                    if current_response:
                        text = "".join(current_response)
                        console.print("\nü§ñ =============================================",style="yellow")
                        console.print(Markdown(text))
                        current_response = []
                        self.running_step = 0

    async def run(self):
        async with connect(
            uri,
            additional_headers={"Content-Type": "application/json"}
        ) as ws:
            self.ws = ws
            console = Console()
            console.print("Gemini Ëã±ËØ≠Âè£ËØ≠Âä©Êâã",style="green",highlight=True)
            console.print("Make by twitter: @BoxMrChen",style="blue")
            console.print("============================================",style="yellow")
            await self.startup()

            async with asyncio.TaskGroup() as tg:
                tg.create_task(self.listen_audio())
                tg.create_task(self.send_audio())
                tg.create_task(self.receive_audio())
                
                def check_error(task):
                    if task.cancelled():
                        return

                    if task.exception() is None:
                        return

                    e = task.exception()
                    print(f"Error: {e}")
                    sys.exit(1)

                for task in tg._tasks:
                    task.add_done_callback(check_error)


if __name__ == "__main__":
    main = AudioLoop()
    asyncio.run(main.run())
